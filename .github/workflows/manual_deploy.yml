name: Manual Deploy
on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to deploy'
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      HOST: ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }}
      DEPLOY_DIRECTORY: /srv
      ENV_FILE_PATH: /srv/.env

    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.tag }}

      - name: Check if tag exists
        run: |
          git fetch --all --tags
          if ! git tag | grep -q "^${{ github.event.inputs.tag }}$"; then
            echo "error: Tag '${{ github.event.inputs.tag }}' not found"
            exit 1
          fi

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.21
          check-latest: true

      - name: Build app
        run: |
          go mod download
          GOOS=linux go build -ldflags="-X 'main.buildCommit=${{ github.sha }}' -X 'main.buildVersion=${{ github.event.inputs.tag }}' -X 'main.buildDate=$(date)'" -o ecabinet -v ./cmd/

      - name: Copy app to server
        env:
          SSH_KEY: ${{ secrets.SERVER_KEY }}
        run: |
          sudo apt-get install -y ssh rsync
          echo "$SSH_KEY" > deploy_key
          chmod 600 deploy_key
          rsync -avz -e 'ssh -i deploy_key -o StrictHostKeyChecking=no' \
          --chown=${{ secrets.SERVER_USERNAME }}:${{ secrets.SERVER_USERNAME }} \
          ecabinet ${{ env.HOST }}:${{ env.DEPLOY_DIRECTORY }}

      - name: Remove old systemd service file
        run: |
          ssh -i deploy_key -o StrictHostKeyChecking=no ${{ env.HOST }} "rm -f /etc/systemd/system/ecabinet.service"

      - name: Copy systemd service file
        run: |
          scp -i deploy_key -o StrictHostKeyChecking=no ${{ github.workspace }}/deploy/ecabinet.service ${{ env.HOST }}:/etc/systemd/system/ecabinet.service

      - name: Set environment variables on server
        run: |
          ssh -i deploy_key -o StrictHostKeyChecking=no ${{ env.HOST }} "\
          echo HTTP_PORT=${{ secrets.HTTP_PORT }}  > ${{ env.ENV_FILE_PATH }} && \
          echo HTTP_TOKEN_SECRET_KEY=${{ secrets.HTTP_TOKEN_SECRET_KEY }}  >> ${{ env.ENV_FILE_PATH }} && \
          echo PG_DSN=${{ secrets.PG_DSN }}  >> ${{ env.ENV_FILE_PATH }} && \
          echo S3_ACCESS_KEY_ID=${{ secrets.S3_ACCESS_KEY_ID }}  >> ${{ env.ENV_FILE_PATH }} && \
          echo S3_SECRET_ACCESS_KEY=${{ secrets.S3_SECRET_ACCESS_KEY }}  >> ${{ env.ENV_FILE_PATH }} && \
          echo ENV_TYPE=testing  >> ${{ env.ENV_FILE_PATH }} && \
          echo LOG_LEVEL=debug  >> ${{ env.ENV_FILE_PATH }} && \
          chmod 600 ${{ env.ENV_FILE_PATH }} && \
          ls -la ${{ env.DEPLOY_DIRECTORY }}"

      - name: Restart app on server
        run: |
          ssh -i deploy_key -o StrictHostKeyChecking=no ${{ env.HOST }} "\
          systemctl daemon-reload && \
          systemctl restart ecabinet && \
          systemctl status ecabinet"
