// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package api

import (
	"context"
	"fmt"
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /departments)
	ListDepartments(w http.ResponseWriter, r *http.Request)

	// (POST /login)
	Login(w http.ResponseWriter, r *http.Request)

	// (GET /login/change-password)
	CheckKey(w http.ResponseWriter, r *http.Request, params CheckKeyParams)

	// (POST /login/change-password)
	ChangePassword(w http.ResponseWriter, r *http.Request)

	// (POST /login/init-change-password)
	InitChangePassword(w http.ResponseWriter, r *http.Request)

	// (GET /users)
	ListUsers(w http.ResponseWriter, r *http.Request, params ListUsersParams)

	// (POST /users)
	AddUser(w http.ResponseWriter, r *http.Request)

	// (GET /users/{user_id})
	GetUser(w http.ResponseWriter, r *http.Request, userId int)

	// (PATCH /users/{user_id})
	PatchUser(w http.ResponseWriter, r *http.Request, userId int)

	// (GET /users/{user_id}/contracts)
	ListContracts(w http.ResponseWriter, r *http.Request, userId int)

	// (POST /users/{user_id}/contracts)
	AddContract(w http.ResponseWriter, r *http.Request, userId int)

	// (DELETE /users/{user_id}/contracts/{contract_id})
	DeleteContract(w http.ResponseWriter, r *http.Request, userId int, contractId int)

	// (GET /users/{user_id}/contracts/{contract_id})
	GetContract(w http.ResponseWriter, r *http.Request, userId int, contractId int)

	// (PATCH /users/{user_id}/contracts/{contract_id})
	PatchContract(w http.ResponseWriter, r *http.Request, userId int, contractId int)

	// (GET /users/{user_id}/educations)
	ListEducations(w http.ResponseWriter, r *http.Request, userId int)

	// (POST /users/{user_id}/educations)
	AddEducation(w http.ResponseWriter, r *http.Request, userId int)

	// (DELETE /users/{user_id}/educations/{education_id})
	DeleteEducation(w http.ResponseWriter, r *http.Request, userId int, educationId int)

	// (GET /users/{user_id}/educations/{education_id})
	GetEducation(w http.ResponseWriter, r *http.Request, userId int, educationId int)

	// (PATCH /users/{user_id}/educations/{education_id})
	PatchEducation(w http.ResponseWriter, r *http.Request, userId int, educationId int)

	// (GET /users/{user_id}/passports)
	ListPassports(w http.ResponseWriter, r *http.Request, userId int)

	// (POST /users/{user_id}/passports)
	AddPassport(w http.ResponseWriter, r *http.Request, userId int)

	// (DELETE /users/{user_id}/passports/{passport_id})
	DeletePassport(w http.ResponseWriter, r *http.Request, userId int, passportId int)

	// (GET /users/{user_id}/passports/{passport_id})
	GetPassport(w http.ResponseWriter, r *http.Request, userId int, passportId int)

	// (PATCH /users/{user_id}/passports/{passport_id})
	PatchPassport(w http.ResponseWriter, r *http.Request, userId int, passportId int)

	// (GET /users/{user_id}/passports/{passport_id}/visas)
	ListVisas(w http.ResponseWriter, r *http.Request, userId int, passportId int)

	// (POST /users/{user_id}/passports/{passport_id}/visas)
	AddVisa(w http.ResponseWriter, r *http.Request, userId int, passportId int)

	// (DELETE /users/{user_id}/passports/{passport_id}/visas/{visa_id})
	DeleteVisa(w http.ResponseWriter, r *http.Request, userId int, passportId int, visaId int)

	// (GET /users/{user_id}/passports/{passport_id}/visas/{visa_id})
	GetVisa(w http.ResponseWriter, r *http.Request, userId int, passportId int, visaId int)

	// (PATCH /users/{user_id}/passports/{passport_id}/visas/{visa_id})
	PatchVisa(w http.ResponseWriter, r *http.Request, userId int, passportId int, visaId int)

	// (POST /users/{user_id}/photo)
	UploadPhoto(w http.ResponseWriter, r *http.Request, userId int)

	// (GET /users/{user_id}/scans)
	ListScans(w http.ResponseWriter, r *http.Request, userId int)

	// (POST /users/{user_id}/scans)
	UploadScan(w http.ResponseWriter, r *http.Request, userId int)

	// (DELETE /users/{user_id}/scans/{scan_id})
	DeleteScan(w http.ResponseWriter, r *http.Request, userId int, scanId int)

	// (GET /users/{user_id}/scans/{scan_id})
	GetScan(w http.ResponseWriter, r *http.Request, userId int, scanId int)

	// (GET /users/{user_id}/trainings)
	ListTrainings(w http.ResponseWriter, r *http.Request, userId int)

	// (POST /users/{user_id}/trainings)
	AddTraining(w http.ResponseWriter, r *http.Request, userId int)

	// (DELETE /users/{user_id}/trainings/{training_id})
	DeleteTraining(w http.ResponseWriter, r *http.Request, userId int, trainingId int)

	// (GET /users/{user_id}/trainings/{training_id})
	GetTraining(w http.ResponseWriter, r *http.Request, userId int, trainingId int)

	// (PATCH /users/{user_id}/trainings/{training_id})
	PatchTraining(w http.ResponseWriter, r *http.Request, userId int, trainingId int)

	// (GET /users/{user_id}/vacations)
	ListVacations(w http.ResponseWriter, r *http.Request, userId int)

	// (POST /users/{user_id}/vacations)
	AddVacation(w http.ResponseWriter, r *http.Request, userId int)

	// (DELETE /users/{user_id}/vacations/{vacation_id})
	DeleteVacation(w http.ResponseWriter, r *http.Request, userId int, vacationId int)

	// (GET /users/{user_id}/vacations/{vacation_id})
	GetVacation(w http.ResponseWriter, r *http.Request, userId int, vacationId int)

	// (PATCH /users/{user_id}/vacations/{vacation_id})
	PatchVacation(w http.ResponseWriter, r *http.Request, userId int, vacationId int)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListDepartments operation middleware
func (siw *ServerInterfaceWrapper) ListDepartments(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, UserReadAccess)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListDepartments(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Login(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CheckKey operation middleware
func (siw *ServerInterfaceWrapper) CheckKey(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CheckKeyParams

	// ------------- Required query parameter "key" -------------

	if paramValue := r.URL.Query().Get("key"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "key"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "key", r.URL.Query(), &params.Key)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CheckKey(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ChangePassword operation middleware
func (siw *ServerInterfaceWrapper) ChangePassword(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ChangePassword(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// InitChangePassword operation middleware
func (siw *ServerInterfaceWrapper) InitChangePassword(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.InitChangePassword(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListUsers operation middleware
func (siw *ServerInterfaceWrapper) ListUsers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BearerAuthScopes, UserReadAccess)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListUsersParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", r.URL.Query(), &params.Query)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "query", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "sort_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_by", r.URL.Query(), &params.SortBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort_by", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListUsers(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddUser operation middleware
func (siw *ServerInterfaceWrapper) AddUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, UserCreateAccess)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, chi.URLParam(r, "user_id"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, UserReadAccess)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUser(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PatchUser operation middleware
func (siw *ServerInterfaceWrapper) PatchUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, chi.URLParam(r, "user_id"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, UserUpdateAccess)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchUser(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListContracts operation middleware
func (siw *ServerInterfaceWrapper) ListContracts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, chi.URLParam(r, "user_id"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, UserReadAccess)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListContracts(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddContract operation middleware
func (siw *ServerInterfaceWrapper) AddContract(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, chi.URLParam(r, "user_id"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, UserUpdateAccess)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddContract(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteContract operation middleware
func (siw *ServerInterfaceWrapper) DeleteContract(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, chi.URLParam(r, "user_id"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	// ------------- Path parameter "contract_id" -------------
	var contractId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "contract_id", runtime.ParamLocationPath, chi.URLParam(r, "contract_id"), &contractId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "contract_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, UserUpdateAccess)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteContract(w, r, userId, contractId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetContract operation middleware
func (siw *ServerInterfaceWrapper) GetContract(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, chi.URLParam(r, "user_id"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	// ------------- Path parameter "contract_id" -------------
	var contractId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "contract_id", runtime.ParamLocationPath, chi.URLParam(r, "contract_id"), &contractId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "contract_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, UserReadAccess)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetContract(w, r, userId, contractId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PatchContract operation middleware
func (siw *ServerInterfaceWrapper) PatchContract(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, chi.URLParam(r, "user_id"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	// ------------- Path parameter "contract_id" -------------
	var contractId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "contract_id", runtime.ParamLocationPath, chi.URLParam(r, "contract_id"), &contractId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "contract_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, UserUpdateAccess)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchContract(w, r, userId, contractId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListEducations operation middleware
func (siw *ServerInterfaceWrapper) ListEducations(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, chi.URLParam(r, "user_id"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, UserReadAccess)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListEducations(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddEducation operation middleware
func (siw *ServerInterfaceWrapper) AddEducation(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, chi.URLParam(r, "user_id"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, UserUpdateAccess)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddEducation(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteEducation operation middleware
func (siw *ServerInterfaceWrapper) DeleteEducation(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, chi.URLParam(r, "user_id"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	// ------------- Path parameter "education_id" -------------
	var educationId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "education_id", runtime.ParamLocationPath, chi.URLParam(r, "education_id"), &educationId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "education_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, UserUpdateAccess)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteEducation(w, r, userId, educationId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetEducation operation middleware
func (siw *ServerInterfaceWrapper) GetEducation(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, chi.URLParam(r, "user_id"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	// ------------- Path parameter "education_id" -------------
	var educationId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "education_id", runtime.ParamLocationPath, chi.URLParam(r, "education_id"), &educationId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "education_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, UserReadAccess)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEducation(w, r, userId, educationId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PatchEducation operation middleware
func (siw *ServerInterfaceWrapper) PatchEducation(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, chi.URLParam(r, "user_id"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	// ------------- Path parameter "education_id" -------------
	var educationId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "education_id", runtime.ParamLocationPath, chi.URLParam(r, "education_id"), &educationId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "education_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, UserUpdateAccess)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchEducation(w, r, userId, educationId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListPassports operation middleware
func (siw *ServerInterfaceWrapper) ListPassports(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, chi.URLParam(r, "user_id"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, UserReadAccess)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListPassports(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddPassport operation middleware
func (siw *ServerInterfaceWrapper) AddPassport(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, chi.URLParam(r, "user_id"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, UserUpdateAccess)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddPassport(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeletePassport operation middleware
func (siw *ServerInterfaceWrapper) DeletePassport(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, chi.URLParam(r, "user_id"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	// ------------- Path parameter "passport_id" -------------
	var passportId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "passport_id", runtime.ParamLocationPath, chi.URLParam(r, "passport_id"), &passportId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "passport_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, UserUpdateAccess)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeletePassport(w, r, userId, passportId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetPassport operation middleware
func (siw *ServerInterfaceWrapper) GetPassport(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, chi.URLParam(r, "user_id"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	// ------------- Path parameter "passport_id" -------------
	var passportId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "passport_id", runtime.ParamLocationPath, chi.URLParam(r, "passport_id"), &passportId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "passport_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, UserReadAccess)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPassport(w, r, userId, passportId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PatchPassport operation middleware
func (siw *ServerInterfaceWrapper) PatchPassport(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, chi.URLParam(r, "user_id"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	// ------------- Path parameter "passport_id" -------------
	var passportId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "passport_id", runtime.ParamLocationPath, chi.URLParam(r, "passport_id"), &passportId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "passport_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, UserUpdateAccess)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchPassport(w, r, userId, passportId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListVisas operation middleware
func (siw *ServerInterfaceWrapper) ListVisas(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, chi.URLParam(r, "user_id"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	// ------------- Path parameter "passport_id" -------------
	var passportId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "passport_id", runtime.ParamLocationPath, chi.URLParam(r, "passport_id"), &passportId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "passport_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, UserReadAccess)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListVisas(w, r, userId, passportId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddVisa operation middleware
func (siw *ServerInterfaceWrapper) AddVisa(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, chi.URLParam(r, "user_id"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	// ------------- Path parameter "passport_id" -------------
	var passportId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "passport_id", runtime.ParamLocationPath, chi.URLParam(r, "passport_id"), &passportId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "passport_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, UserUpdateAccess)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddVisa(w, r, userId, passportId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteVisa operation middleware
func (siw *ServerInterfaceWrapper) DeleteVisa(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, chi.URLParam(r, "user_id"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	// ------------- Path parameter "passport_id" -------------
	var passportId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "passport_id", runtime.ParamLocationPath, chi.URLParam(r, "passport_id"), &passportId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "passport_id", Err: err})
		return
	}

	// ------------- Path parameter "visa_id" -------------
	var visaId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "visa_id", runtime.ParamLocationPath, chi.URLParam(r, "visa_id"), &visaId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "visa_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, UserUpdateAccess)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteVisa(w, r, userId, passportId, visaId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetVisa operation middleware
func (siw *ServerInterfaceWrapper) GetVisa(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, chi.URLParam(r, "user_id"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	// ------------- Path parameter "passport_id" -------------
	var passportId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "passport_id", runtime.ParamLocationPath, chi.URLParam(r, "passport_id"), &passportId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "passport_id", Err: err})
		return
	}

	// ------------- Path parameter "visa_id" -------------
	var visaId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "visa_id", runtime.ParamLocationPath, chi.URLParam(r, "visa_id"), &visaId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "visa_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, UserReadAccess)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVisa(w, r, userId, passportId, visaId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PatchVisa operation middleware
func (siw *ServerInterfaceWrapper) PatchVisa(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, chi.URLParam(r, "user_id"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	// ------------- Path parameter "passport_id" -------------
	var passportId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "passport_id", runtime.ParamLocationPath, chi.URLParam(r, "passport_id"), &passportId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "passport_id", Err: err})
		return
	}

	// ------------- Path parameter "visa_id" -------------
	var visaId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "visa_id", runtime.ParamLocationPath, chi.URLParam(r, "visa_id"), &visaId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "visa_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, UserUpdateAccess)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchVisa(w, r, userId, passportId, visaId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UploadPhoto operation middleware
func (siw *ServerInterfaceWrapper) UploadPhoto(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, chi.URLParam(r, "user_id"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, UserUpdateAccess)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UploadPhoto(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListScans operation middleware
func (siw *ServerInterfaceWrapper) ListScans(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, chi.URLParam(r, "user_id"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, UserReadAccess)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListScans(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UploadScan operation middleware
func (siw *ServerInterfaceWrapper) UploadScan(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, chi.URLParam(r, "user_id"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, UserUpdateAccess)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UploadScan(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteScan operation middleware
func (siw *ServerInterfaceWrapper) DeleteScan(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, chi.URLParam(r, "user_id"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	// ------------- Path parameter "scan_id" -------------
	var scanId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "scan_id", runtime.ParamLocationPath, chi.URLParam(r, "scan_id"), &scanId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "scan_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, UserUpdateAccess)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteScan(w, r, userId, scanId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetScan operation middleware
func (siw *ServerInterfaceWrapper) GetScan(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, chi.URLParam(r, "user_id"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	// ------------- Path parameter "scan_id" -------------
	var scanId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "scan_id", runtime.ParamLocationPath, chi.URLParam(r, "scan_id"), &scanId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "scan_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, UserReadAccess)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetScan(w, r, userId, scanId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListTrainings operation middleware
func (siw *ServerInterfaceWrapper) ListTrainings(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, chi.URLParam(r, "user_id"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, UserReadAccess)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTrainings(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddTraining operation middleware
func (siw *ServerInterfaceWrapper) AddTraining(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, chi.URLParam(r, "user_id"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, UserUpdateAccess)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddTraining(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteTraining operation middleware
func (siw *ServerInterfaceWrapper) DeleteTraining(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, chi.URLParam(r, "user_id"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	// ------------- Path parameter "training_id" -------------
	var trainingId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "training_id", runtime.ParamLocationPath, chi.URLParam(r, "training_id"), &trainingId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "training_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, UserUpdateAccess)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTraining(w, r, userId, trainingId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTraining operation middleware
func (siw *ServerInterfaceWrapper) GetTraining(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, chi.URLParam(r, "user_id"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	// ------------- Path parameter "training_id" -------------
	var trainingId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "training_id", runtime.ParamLocationPath, chi.URLParam(r, "training_id"), &trainingId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "training_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, UserReadAccess)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTraining(w, r, userId, trainingId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PatchTraining operation middleware
func (siw *ServerInterfaceWrapper) PatchTraining(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, chi.URLParam(r, "user_id"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	// ------------- Path parameter "training_id" -------------
	var trainingId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "training_id", runtime.ParamLocationPath, chi.URLParam(r, "training_id"), &trainingId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "training_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, UserUpdateAccess)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchTraining(w, r, userId, trainingId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListVacations operation middleware
func (siw *ServerInterfaceWrapper) ListVacations(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, chi.URLParam(r, "user_id"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, UserReadAccess)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListVacations(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddVacation operation middleware
func (siw *ServerInterfaceWrapper) AddVacation(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, chi.URLParam(r, "user_id"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, UserUpdateAccess)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddVacation(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteVacation operation middleware
func (siw *ServerInterfaceWrapper) DeleteVacation(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, chi.URLParam(r, "user_id"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	// ------------- Path parameter "vacation_id" -------------
	var vacationId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "vacation_id", runtime.ParamLocationPath, chi.URLParam(r, "vacation_id"), &vacationId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "vacation_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, UserUpdateAccess)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteVacation(w, r, userId, vacationId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetVacation operation middleware
func (siw *ServerInterfaceWrapper) GetVacation(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, chi.URLParam(r, "user_id"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	// ------------- Path parameter "vacation_id" -------------
	var vacationId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "vacation_id", runtime.ParamLocationPath, chi.URLParam(r, "vacation_id"), &vacationId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "vacation_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, UserReadAccess)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVacation(w, r, userId, vacationId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PatchVacation operation middleware
func (siw *ServerInterfaceWrapper) PatchVacation(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, chi.URLParam(r, "user_id"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	// ------------- Path parameter "vacation_id" -------------
	var vacationId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "vacation_id", runtime.ParamLocationPath, chi.URLParam(r, "vacation_id"), &vacationId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "vacation_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, UserUpdateAccess)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchVacation(w, r, userId, vacationId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/departments", wrapper.ListDepartments)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/login", wrapper.Login)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/login/change-password", wrapper.CheckKey)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/login/change-password", wrapper.ChangePassword)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/login/init-change-password", wrapper.InitChangePassword)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users", wrapper.ListUsers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users", wrapper.AddUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/{user_id}", wrapper.GetUser)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/users/{user_id}", wrapper.PatchUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/{user_id}/contracts", wrapper.ListContracts)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users/{user_id}/contracts", wrapper.AddContract)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/users/{user_id}/contracts/{contract_id}", wrapper.DeleteContract)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/{user_id}/contracts/{contract_id}", wrapper.GetContract)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/users/{user_id}/contracts/{contract_id}", wrapper.PatchContract)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/{user_id}/educations", wrapper.ListEducations)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users/{user_id}/educations", wrapper.AddEducation)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/users/{user_id}/educations/{education_id}", wrapper.DeleteEducation)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/{user_id}/educations/{education_id}", wrapper.GetEducation)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/users/{user_id}/educations/{education_id}", wrapper.PatchEducation)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/{user_id}/passports", wrapper.ListPassports)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users/{user_id}/passports", wrapper.AddPassport)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/users/{user_id}/passports/{passport_id}", wrapper.DeletePassport)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/{user_id}/passports/{passport_id}", wrapper.GetPassport)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/users/{user_id}/passports/{passport_id}", wrapper.PatchPassport)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/{user_id}/passports/{passport_id}/visas", wrapper.ListVisas)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users/{user_id}/passports/{passport_id}/visas", wrapper.AddVisa)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/users/{user_id}/passports/{passport_id}/visas/{visa_id}", wrapper.DeleteVisa)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/{user_id}/passports/{passport_id}/visas/{visa_id}", wrapper.GetVisa)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/users/{user_id}/passports/{passport_id}/visas/{visa_id}", wrapper.PatchVisa)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users/{user_id}/photo", wrapper.UploadPhoto)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/{user_id}/scans", wrapper.ListScans)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users/{user_id}/scans", wrapper.UploadScan)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/users/{user_id}/scans/{scan_id}", wrapper.DeleteScan)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/{user_id}/scans/{scan_id}", wrapper.GetScan)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/{user_id}/trainings", wrapper.ListTrainings)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users/{user_id}/trainings", wrapper.AddTraining)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/users/{user_id}/trainings/{training_id}", wrapper.DeleteTraining)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/{user_id}/trainings/{training_id}", wrapper.GetTraining)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/users/{user_id}/trainings/{training_id}", wrapper.PatchTraining)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/{user_id}/vacations", wrapper.ListVacations)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users/{user_id}/vacations", wrapper.AddVacation)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/users/{user_id}/vacations/{vacation_id}", wrapper.DeleteVacation)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/{user_id}/vacations/{vacation_id}", wrapper.GetVacation)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/users/{user_id}/vacations/{vacation_id}", wrapper.PatchVacation)
	})

	return r
}
