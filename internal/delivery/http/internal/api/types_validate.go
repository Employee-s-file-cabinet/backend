//nolint:all // code generated by oapi-codegen mostly
package api

import (
	"context"

	vld "github.com/muonsoft/validation"
	"github.com/muonsoft/validation/it"
)

func (b LoginJSONRequestBody) Validate(ctx context.Context, validator *vld.Validator) error {
	return validator.Validate(
		ctx,
		vld.StringProperty("login", string(b.Login),
			it.IsNotBlank(),
			it.HasLengthBetween(5, 50),
			it.IsEmail()),
		vld.StringProperty("password", b.Password,
			it.IsNotBlank(),
			it.HasLengthBetween(8, 15)),
	)
}

func (b ChangePasswordJSONRequestBody) Validate(ctx context.Context, validator *vld.Validator) error {
	return validator.Validate(
		ctx,
		vld.StringProperty("key", b.Key,
			it.IsNotBlank(),
			it.HasExactLength(36)),
		vld.StringProperty("password", b.Password,
			it.IsNotBlank(),
			it.HasLengthBetween(8, 15)),
	)
}

func (b InitChangePasswordJSONRequestBody) Validate(ctx context.Context, validator *vld.Validator) error {
	return validator.Validate(
		ctx,
		vld.StringProperty("login", string(b.Login),
			it.IsNotBlank(),
			it.HasLengthBetween(5, 50),
		))
}

func (b AddUserJSONRequestBody) Validate(ctx context.Context, validator *vld.Validator) error {
	return validator.Validate(
		ctx,
		vld.StringProperty("first_name", b.FirstName,
			it.IsNotBlank(),
			it.HasLengthBetween(2, 150)),
		vld.StringProperty("last_name", b.LastName,
			it.IsNotBlank(),
			it.HasLengthBetween(2, 150)),
		vld.StringProperty("middle_name", b.MiddleName,
			it.HasLengthBetween(2, 150)).
			When(b.MiddleName != ""),
		vld.StringProperty("email", string(b.Email),
			it.IsNotBlank(),
			it.HasLengthBetween(5, 50)),
		vld.StringProperty("mobile_phone_number", b.MobilePhoneNumber,
			it.IsNotBlank(),
			it.HasLengthBetween(7, 15)),
		vld.StringProperty("office_phone_number", b.OfficePhoneNumber,
			it.HasMaxLength(15)),
		vld.StringProperty("grade", b.Grade,
			it.IsNotBlank(),
			it.HasExactLength(1)),
		vld.When(b.WorkingModel != nil).
			At(vld.PropertyName("working_model")).
			Then(vld.NilComparable(b.WorkingModel,
				it.IsNotBlankComparable[WorkingModel](),
				it.IsOneOf[WorkingModel](
					Hybrid,
					InOffice,
					Remote))),
		vld.ComparableProperty[Gender]("gender",
			b.Gender,
			it.IsNotBlankComparable[Gender](),
			it.IsOneOf[Gender](Male, Female)),
		vld.StringProperty("place_of_birth", b.PlaceOfBirth,
			it.IsNotBlank(),
			it.HasLengthBetween(2, 150)),
		vld.StringProperty("registration_address", b.RegistrationAddress,
			it.IsNotBlank(),
			it.HasLengthBetween(2, 150)),
		vld.StringProperty("residential_address", b.ResidentialAddress,
			it.IsNotBlank(),
			it.HasLengthBetween(2, 150)),
		vld.StringProperty("nationality", b.Nationality,
			it.IsNotBlank(),
			it.HasLengthBetween(2, 150)),
		vld.EachStringProperty("foreign_languages", b.ForeignLanguages,
			it.IsNotBlank(),
			it.HasLengthBetween(2, 50)),
		vld.When(b.Military != nil).
			At(vld.PropertyName("military")).
			Then(vld.ValidProperty("military", b.Military)),
		vld.ValidProperty("insurance", b.Insurance),
		vld.ValidProperty("taxpayer", b.Taxpayer),
		vld.When(b.WorkPermit != nil).
			At(vld.PropertyName("work_permit")).
			Then(vld.ValidProperty("work_permit", b.WorkPermit)),
	)
}

func (b PatchUserJSONRequestBody) Validate(ctx context.Context, validator *vld.Validator) error {
	return validator.Validate(
		ctx,
		vld.When(b.FirstName != nil).
			At(vld.PropertyName("first_name")).
			Then(vld.NilString(b.FirstName,
				it.IsNotBlank(),
				it.HasLengthBetween(2, 150))),
		vld.When(b.LastName != nil).
			At(vld.PropertyName("last_name")).
			Then(vld.NilString(b.LastName,
				it.IsNotBlank(),
				it.HasLengthBetween(2, 150))),
		vld.When(b.MiddleName != nil).
			At(vld.PropertyName("middle_name")).
			Then(vld.NilString(b.MiddleName,
				it.HasLengthBetween(2, 150))),
		vld.When(b.Email != nil).
			At(vld.PropertyName("email")).
			Then(vld.NilString((*string)(b.Email),
				it.IsNotBlank(),
				it.HasLengthBetween(5, 50))),
		vld.When(b.MobilePhoneNumber != nil).
			At(vld.PropertyName("mobile_phone_number")).
			Then(vld.NilString(b.MobilePhoneNumber,
				it.IsNotBlank(),
				it.HasLengthBetween(7, 15))),
		vld.When(b.OfficePhoneNumber != nil).
			At(vld.PropertyName("office_phone_number")).
			Then(vld.NilString(b.OfficePhoneNumber,
				it.HasMaxLength(15))),
		vld.When(b.Grade != nil).
			At(vld.PropertyName("grade")).
			Then(vld.NilString(b.Grade,
				it.IsNotBlank(),
				it.HasExactLength(1))),
		vld.When(b.WorkingModel != nil).
			At(vld.PropertyName("working_model")).
			Then(vld.NilComparable(b.WorkingModel,
				it.IsNotBlankComparable[WorkingModel](),
				it.IsOneOf[WorkingModel](
					Hybrid,
					InOffice,
					Remote))),
		vld.When(b.Gender != nil).
			At(vld.PropertyName("gender")).
			Then(vld.NilComparable(b.Gender,
				it.IsNotBlankComparable[Gender](),
				it.IsOneOf[Gender](Male, Female))),
		vld.When(b.PlaceOfBirth != nil).
			At(vld.PropertyName("place_of_birth")).
			Then(vld.NilString(b.PlaceOfBirth,
				it.IsNotBlank(),
				it.HasLengthBetween(2, 150))),
		vld.When(b.RegistrationAddress != nil).
			At(vld.PropertyName("registration_address")).
			Then(vld.NilString(b.RegistrationAddress,
				it.IsNotBlank(),
				it.HasLengthBetween(2, 150))),
		vld.When(b.ResidentialAddress != nil).
			At(vld.PropertyName("residential_address")).
			Then(vld.NilString(b.ResidentialAddress,
				it.IsNotBlank(),
				it.HasLengthBetween(2, 150))),
		vld.When(b.Nationality != nil).
			At(vld.PropertyName("nationality")).
			Then(vld.NilString(b.Nationality,
				it.IsNotBlank(),
				it.HasLengthBetween(2, 150))),
		vld.EachStringProperty("foreign_languages", b.ForeignLanguages,
			it.IsNotBlank(),
			it.HasLengthBetween(2, 50)),
		vld.ValidSliceProperty[PositionTrackItem]("position_track", b.PositionTrack),
		vld.When(b.Military != nil).
			At(vld.PropertyName("military")).
			Then(vld.ValidProperty("military", b.Military)),
		vld.When(b.Insurance != nil).
			At(vld.PropertyName("insurance")).
			Then(vld.ValidProperty("insurance", b.Insurance)),
		vld.When(b.Taxpayer != nil).
			At(vld.PropertyName("taxpayer")).
			Then(vld.ValidProperty("taxpayer", b.Taxpayer)),
		vld.When(b.WorkPermit != nil).
			At(vld.PropertyName("work_permit")).
			Then(vld.ValidProperty("work_permit", b.WorkPermit)),
	)
}

func (b PutUserJSONRequestBody) Validate(ctx context.Context, validator *vld.Validator) error {
	return validator.Validate(
		ctx,
		vld.StringProperty("first_name", b.FirstName,
			it.IsNotBlank(),
			it.HasLengthBetween(2, 150)),
		vld.StringProperty("last_name", b.LastName,
			it.IsNotBlank(),
			it.HasLengthBetween(2, 150)),
		vld.StringProperty("middle_name", b.MiddleName,
			it.HasLengthBetween(2, 150)).
			When(b.MiddleName != ""),
		vld.StringProperty("email", string(b.Email),
			it.IsNotBlank(),
			it.HasLengthBetween(5, 50)),
		vld.StringProperty("mobile_phone_number", b.MobilePhoneNumber,
			it.IsNotBlank(),
			it.HasLengthBetween(7, 15)),
		vld.StringProperty("office_phone_number", b.OfficePhoneNumber,
			it.HasMaxLength(15)),
		vld.StringProperty("grade", b.Grade,
			it.IsNotBlank(),
			it.HasExactLength(1)),
		vld.When(b.WorkingModel != nil).
			At(vld.PropertyName("working_model")).
			Then(vld.NilComparable(b.WorkingModel,
				it.IsNotBlankComparable[WorkingModel](),
				it.IsOneOf[WorkingModel](
					Hybrid,
					InOffice,
					Remote))),
		vld.ComparableProperty[Gender]("gender",
			b.Gender,
			it.IsNotBlankComparable[Gender](),
			it.IsOneOf[Gender](Male, Female)),
		vld.StringProperty("place_of_birth", b.PlaceOfBirth,
			it.IsNotBlank(),
			it.HasLengthBetween(2, 150)),
		vld.StringProperty("registration_address", b.RegistrationAddress,
			it.IsNotBlank(),
			it.HasLengthBetween(2, 150)),
		vld.StringProperty("residential_address", b.ResidentialAddress,
			it.IsNotBlank(),
			it.HasLengthBetween(2, 150)),
		vld.StringProperty("nationality", b.Nationality,
			it.IsNotBlank(),
			it.HasLengthBetween(2, 150)),
		vld.EachStringProperty("foreign_languages", b.ForeignLanguages,
			it.IsNotBlank(),
			it.HasLengthBetween(2, 50)),
		vld.ValidSliceProperty[PositionTrackItem]("position_track", b.PositionTrack),
		vld.When(b.Military != nil).
			At(vld.PropertyName("military")).
			Then(vld.ValidProperty("military", b.Military)),
		vld.ValidProperty("insurance", b.Insurance),
		vld.ValidProperty("taxpayer", b.Taxpayer),
		vld.When(b.WorkPermit != nil).
			At(vld.PropertyName("work_permit")).
			Then(vld.ValidProperty("work_permit", b.WorkPermit)),
	)
}

func (b AddContractJSONRequestBody) Validate(ctx context.Context, validator *vld.Validator) error {
	return validator.Validate(
		ctx,
		vld.StringProperty("number", b.Number,
			it.IsNotBlank(),
			it.HasLengthBetween(2, 50)),
		vld.ComparableProperty[ContractType]("type",
			b.Type,
			it.IsNotBlankComparable[ContractType](),
			it.IsOneOf[ContractType](Permanent, Temporary)),
	)
}

func (b PatchContractJSONRequestBody) Validate(ctx context.Context, validator *vld.Validator) error {
	return validator.Validate(
		ctx,
		vld.When(b.Number != nil).
			At(vld.PropertyName("number")).
			Then(vld.NilString(b.Number,
				it.IsNotBlank(),
				it.HasLengthBetween(2, 50))),
		vld.When(b.Type != nil).
			At(vld.PropertyName("type")).
			Then(vld.NilComparable(b.Type,
				it.IsNotBlankComparable[ContractType](),
				it.IsOneOf[ContractType](
					Permanent,
					Temporary))),
	)
}

func (b PutContractJSONRequestBody) Validate(ctx context.Context, validator *vld.Validator) error {
	return validator.Validate(
		ctx,
		vld.StringProperty("number", b.Number,
			it.IsNotBlank(),
			it.HasLengthBetween(2, 50)),
		vld.ComparableProperty[ContractType]("type",
			b.Type,
			it.IsNotBlankComparable[ContractType](),
			it.IsOneOf[ContractType](Permanent, Temporary)),
	)
}

func (b AddEducationJSONRequestBody) Validate(ctx context.Context, validator *vld.Validator) error {
	return validator.Validate(
		ctx,
		vld.StringProperty("number", b.Number,
			it.HasLengthBetween(2, 50)),
		vld.StringProperty("issued_institution", b.IssuedInstitution,
			it.IsNotBlank(),
			it.HasLengthBetween(2, 150)),
		vld.StringProperty("program", b.Program,
			it.IsNotBlank(),
			it.HasLengthBetween(2, 150)),
	)
}

func (b PatchEducationJSONRequestBody) Validate(ctx context.Context, validator *vld.Validator) error {
	return validator.Validate(
		ctx,
		vld.When(b.Number != nil).
			At(vld.PropertyName("number")).
			Then(vld.NilString(b.Number,
				it.IsNotBlank(),
				it.HasLengthBetween(2, 50))),
		vld.When(b.IssuedInstitution != nil).
			At(vld.PropertyName("issued_institution")).
			Then(vld.NilString(b.IssuedInstitution,
				it.IsNotBlank(),
				it.HasLengthBetween(2, 150))),
		vld.When(b.Program != nil).
			At(vld.PropertyName("program")).
			Then(vld.NilString(b.Program,
				it.IsNotBlank(),
				it.HasLengthBetween(2, 150))),
	)
}

func (b PutEducationJSONRequestBody) Validate(ctx context.Context, validator *vld.Validator) error {
	return validator.Validate(
		ctx,
		vld.StringProperty("number", b.Number,
			it.HasLengthBetween(2, 50)),
		vld.StringProperty("issued_institution", b.IssuedInstitution,
			it.IsNotBlank(),
			it.HasLengthBetween(2, 150)),
		vld.StringProperty("program", b.Program,
			it.IsNotBlank(),
			it.HasLengthBetween(2, 150)),
	)
}

func (b AddPassportJSONRequestBody) Validate(ctx context.Context, validator *vld.Validator) error {
	return validator.Validate(
		ctx,
		vld.StringProperty("issued_by", b.IssuedBy,
			it.IsNotBlank(),
			it.HasLengthBetween(2, 150)),
		vld.StringProperty("number",
			b.Number,
			it.IsNotBlank(),
			it.HasLengthBetween(2, 50),
			consistOnlyNumbersFormat()),
		vld.ComparableProperty[PassportType]("type",
			b.Type,
			it.IsNotBlankComparable[PassportType](),
			it.IsOneOf[PassportType](National, International)),
	)
}

func (b PatchPassportJSONRequestBody) Validate(ctx context.Context, validator *vld.Validator) error {
	return validator.Validate(
		ctx,
		vld.When(b.IssuedBy != nil).
			At(vld.PropertyName("issued_by")).
			Then(vld.NilString(b.IssuedBy,
				it.IsNotBlank(),
				it.HasLengthBetween(2, 150))),
		vld.When(b.Number != nil).
			At(vld.PropertyName("number")).
			Then(vld.NilString(b.Number,
				it.IsNotBlank(),
				it.HasLengthBetween(2, 50),
				consistOnlyNumbersFormat())),
		vld.When(b.Type != nil).
			At(vld.PropertyName("type")).
			Then(vld.NilComparable(b.Type,
				it.IsNotBlankComparable[PassportType](),
				it.IsOneOf[PassportType](National, International))),
	)
}

func (b PutPassportJSONRequestBody) Validate(ctx context.Context, validator *vld.Validator) error {
	return validator.Validate(
		ctx,
		vld.StringProperty("issued_by", b.IssuedBy,
			it.IsNotBlank(),
			it.HasLengthBetween(2, 150)),
		vld.StringProperty("number",
			b.Number,
			it.IsNotBlank(),
			it.HasLengthBetween(2, 50),
			consistOnlyNumbersFormat()),
		vld.ComparableProperty[PassportType]("type",
			b.Type,
			it.IsNotBlankComparable[PassportType](),
			it.IsOneOf[PassportType](National, International)),
	)
}

func (b AddVisaJSONRequestBody) Validate(ctx context.Context, validator *vld.Validator) error {
	return validator.Validate(
		ctx,
		vld.StringProperty("issued_state", b.IssuedState,
			it.IsNotBlank(),
			it.HasLengthBetween(2, 50)),
		vld.StringProperty("number", b.Number,
			it.IsNotBlank(),
			it.HasLengthBetween(2, 50)),
		vld.StringProperty("type", b.Type,
			it.IsNotBlank(),
			it.HasLengthBetween(1, 50)),
	)
}

func (b PatchVisaJSONRequestBody) Validate(ctx context.Context, validator *vld.Validator) error {
	return validator.Validate(
		ctx,
		vld.When(b.IssuedState != nil).
			At(vld.PropertyName("issued_state")).
			Then(vld.NilString(b.IssuedState,
				it.IsNotBlank(),
				it.HasLengthBetween(2, 50))),
		vld.When(b.Number != nil).
			At(vld.PropertyName("number")).
			Then(vld.NilString(b.Number,
				it.IsNotBlank(),
				it.HasLengthBetween(2, 50))),
		vld.When(b.Type != nil).
			At(vld.PropertyName("type")).
			Then(vld.NilString(b.Type,
				it.IsNotBlank(),
				it.HasLengthBetween(1, 50))),
	)
}

func (b PutVisaJSONRequestBody) Validate(ctx context.Context, validator *vld.Validator) error {
	return validator.Validate(
		ctx,
		vld.StringProperty("issued_state", b.IssuedState,
			it.IsNotBlank(),
			it.HasLengthBetween(2, 50)),
		vld.StringProperty("number", b.Number,
			it.IsNotBlank(),
			it.HasLengthBetween(2, 50)),
		vld.StringProperty("type",
			b.Type,
			it.IsNotBlank(),
			it.HasLengthBetween(1, 50)),
	)
}

func (b AddTrainingJSONRequestBody) Validate(ctx context.Context, validator *vld.Validator) error {
	return validator.Validate(
		ctx,
		vld.StringProperty("issued_institution", b.IssuedInstitution,
			it.IsNotBlank(),
			it.HasLengthBetween(2, 150)),
		vld.StringProperty("program", b.Program,
			it.IsNotBlank(),
			it.HasLengthBetween(2, 150)),
	)
}

func (b PatchTrainingJSONRequestBody) Validate(ctx context.Context, validator *vld.Validator) error {
	return validator.Validate(
		ctx,
		vld.When(b.IssuedInstitution != nil).
			At(vld.PropertyName("issued_institution")).
			Then(vld.NilString(b.IssuedInstitution,
				it.IsNotBlank(),
				it.HasLengthBetween(2, 150))),
		vld.When(b.Program != nil).
			At(vld.PropertyName("program")).
			Then(vld.NilString(b.Program,
				it.IsNotBlank(),
				it.HasLengthBetween(2, 150))),
	)
}

func (b PutTrainingJSONRequestBody) Validate(ctx context.Context, validator *vld.Validator) error {
	return validator.Validate(
		ctx,
		vld.StringProperty("issued_institution", b.IssuedInstitution,
			it.IsNotBlank(),
			it.HasLengthBetween(2, 150)),
		vld.StringProperty("program", b.Program,
			it.IsNotBlank(),
			it.HasLengthBetween(2, 150)),
	)
}

func (b AddVacationJSONRequestBody) Validate(ctx context.Context, validator *vld.Validator) error {
	return validator.Validate(ctx)
}

func (b PatchVacationJSONRequestBody) Validate(ctx context.Context, validator *vld.Validator) error {
	return validator.Validate(ctx)
}

func (b PutVacationJSONRequestBody) Validate(ctx context.Context, validator *vld.Validator) error {
	return validator.Validate(ctx)
}

func (i Insurance) Validate(ctx context.Context, validator *vld.Validator) error {
	return validator.Validate(
		ctx,
		vld.StringProperty("number",
			i.Number,
			it.IsNotBlank(),
			it.HasExactLength(11),
			consistOnlyNumbersFormat(),
			hasCorrectInsuranceChecksum()),
	)
}

func (m Military) Validate(ctx context.Context, validator *vld.Validator) error {
	return validator.Validate(
		ctx,
		vld.StringProperty("category", m.Category,
			it.IsNotBlank(),
			it.HasLengthBetween(1, 2)),
		vld.StringProperty("comissariat", m.Comissariat,
			it.IsNotBlank(),
			it.HasLengthBetween(2, 150)),
		vld.StringProperty("rank", m.Rank,
			it.IsNotBlank(),
			it.HasLengthBetween(2, 150)),
		vld.StringProperty("speciality", m.Speciality,
			it.IsNotBlank(),
			it.HasLengthBetween(6, 7)),
	)
}

func (pt PositionTrackItem) Validate(ctx context.Context, validator *vld.Validator) error {
	return nil
}

func (tp Taxpayer) Validate(ctx context.Context, validator *vld.Validator) error {
	return validator.Validate(
		ctx,
		vld.StringProperty("number",
			tp.Number,
			it.IsNotBlank(),
			it.HasLengthBetween(10, 12),
			consistOnlyNumbersFormat(),
			hasCorrectTaxpayerChecksum()),
	)
}

func (v Vacation) Validate(ctx context.Context, validator *vld.Validator) error {
	return validator.Validate(ctx)
}

func (wp WorkPermit) Validate(ctx context.Context, validator *vld.Validator) error {
	return validator.Validate(
		ctx,
		vld.StringProperty("number",
			wp.Number,
			it.IsNotBlank(),
			it.HasLengthBetween(2, 50),
			consistOnlyNumbersFormat()), // TODO: unknown format, length
	)
}

func (cp CheckKeyParams) Validate(ctx context.Context, validator *vld.Validator) error {
	return validator.Validate(
		ctx,
		vld.StringProperty("key", cp.Key,
			it.IsNotBlank(),
			it.HasExactLength(36)),
	)
}

func (lp ListUsersParams) Validate(ctx context.Context, validator *vld.Validator) error {
	return validator.Validate(
		ctx,
		vld.When(lp.SortBy != nil).
			At(vld.PropertyName("sort_by")).
			Then(vld.NilComparable(lp.SortBy,
				it.IsNotBlankComparable[ListUsersParamsSortBy](),
				it.IsOneOf[ListUsersParamsSortBy](
					ListUsersParamsSortByAlphabet,
					ListUsersParamsSortByDepartment))),
		vld.When(lp.Query != nil).
			At(vld.PropertyName("query")).
			Then(vld.NilString(lp.Query, it.HasMaxLength(150))),
	)
}

func (us UploadScanMultipartRequestBody) Validate(ctx context.Context, validator *vld.Validator) error {
	return validator.Validate(
		ctx,
		vld.When(us.Description != nil).
			At(vld.PropertyName("description")).
			Then(vld.NilString(us.Description,
				it.HasLengthBetween(2, 150))),
		vld.ComparableProperty[ScanType]("type",
			us.Type,
			it.IsNotBlankComparable[ScanType](),
			it.IsOneOf[ScanType](
				ScanTypeBabyBirth,
				ScanTypeBriefing,
				ScanTypeContract,
				ScanTypeEducation,
				ScanTypeInsurance,
				ScanTypeMarriage,
				ScanTypeMilitary,
				ScanTypeOther,
				ScanTypePassport,
				ScanTypePersonalDataProcessing,
				ScanTypeTaxpayer,
				ScanTypeTraining,
				ScanTypeWorkPermit)),
	)
}
